const passport = require("passport");
const GoogleStrategy = require("passport-google-oauth20").Strategy;
const mongoose = require("mongoose");
const keys = require("../config/keys");
// require('../models/Users');  no need to call user schema

const User = mongoose.model("users");

passport.use(
  new GoogleStrategy(
    {
      clientID: keys.googleClientID,
      clientSecret: keys.googleClientSecret,
      callbackURL: "/auth/google/callback",
      //google api change https to http if encounter proxy (e.g. loadbalancer)
      proxy: true
    },
    //accessToken to access user info, refreshToken is used to acceess accessToken coz it expires periodically
    //done is the callback to pass user info back to passport
    //profile is the profile passed back from google oauth
    async (accessToken, refreshToken, profile, done) => {
      const existingUser = await User.findOne({ googleId: profile.id });

      if (existingUser) {
        //for done callback: first argument is about error, 2nd argument is data passed to passport when success
        return done(null, existingUser);
      }
      //save will save new user instance to mongoDB
      const user = await new User({ googleId: profile.id }).save();
      done(null, user);

      // console.log('access token: ',accessToken);
      // console.log('refresh token: ',accessToken);
      // console.log('profile: ',profile);
    }
  )
);

//serializeUser() get user from the done callback, serialize it to form a cookie and send to client
//this step is to generate a passport unique id from mongoose user._id
//user._id is the unique id generated by mongo, one _id can have multiple oauth accounts from google, fb, etc.
//user._id is the auto-generated id, not the google oauth callback profile id
passport.serializeUser((user, done) => {
  // console.log(user.id);
  done(null, user.id);
});

//whatever that was serialized as the output, becomes the input of deserializeUser.
//this is to deserialize user cookie id when user visits from browser
//to find mongoose user instance from cookie id by deserialization
passport.deserializeUser((id, done) => {
  User.findById(id).then(user => {
    done(null, user);
  });
});
